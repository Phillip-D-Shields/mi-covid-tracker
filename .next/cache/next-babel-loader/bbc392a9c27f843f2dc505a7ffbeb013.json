{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\"; // This custom hook centralizes and streamlines handling of HTTP calls\n\nexport default function useFetch(url) {\n  const {\n    0: data,\n    1: setData\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  useEffect(() => {\n    fetch(url).then(response => {\n      if (response.ok) return response.json();\n      setError(response);\n    }).then(data => setData(data)).catch(err => {\n      console.error(err);\n      setError(err);\n    }).finally(() => setLoading(false));\n  }, [init, url]);\n  return {\n    data,\n    loading,\n    error\n  };\n}","map":{"version":3,"sources":["/home/phillip/code/nextjs/mi-covid-tracker/hooks/useFetch.js"],"names":["useState","useEffect","useRef","useFetch","url","data","setData","loading","setLoading","error","setError","fetch","then","response","ok","json","catch","err","console","finally","init"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C,C,CACA;;AACA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACpC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM;AAAA,OAACO,OAAD;AAAA,OAAUC;AAAV,MAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACS,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEdU,IAAAA,KAAK,CAACP,GAAD,CAAL,CACGQ,IADH,CACQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,EAAb,EAAiB,OAAOD,QAAQ,CAACE,IAAT,EAAP;AACjBL,MAAAA,QAAQ,CAACG,QAAD,CAAR;AACD,KAJH,EAKGD,IALH,CAKQP,IAAI,IAAIC,OAAO,CAACD,IAAD,CALvB,EAMGW,KANH,CAMSC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACT,KAAR,CAAcQ,GAAd;AACAP,MAAAA,QAAQ,CAACO,GAAD,CAAR;AACD,KATH,EAUGE,OAVH,CAUW,MAAMX,UAAU,CAAC,KAAD,CAV3B;AAWD,GAbQ,EAaN,CAACY,IAAD,EAAOhB,GAAP,CAbM,CAAT;AAeA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACD","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n// This custom hook centralizes and streamlines handling of HTTP calls\nexport default function useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n  \n    fetch(url)\n      .then(response => {\n        if (response.ok) return response.json();\n        setError(response);\n      })\n      .then(data => setData(data))\n      .catch(err => {\n        console.error(err);\n        setError(err);\n      })\n      .finally(() => setLoading(false));\n  }, [init, url]);\n\n  return { data, loading, error };\n}"]},"metadata":{},"sourceType":"module"}